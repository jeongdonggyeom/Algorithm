import sys
limit_number = 15000
sys.setrecursionlimit(limit_number)


n = int(input())
li = [['*' for _ in range(n)] for _ in range(n)]

def abcd(li, pos, size):
    if size == 1:
        return
    add = size // 3
    x = pos[0] + add
    y = pos[1] + add

    for i in range(add):
        for j in range(add):
            li[x+i][y+j] = " "
    
    abcd(li, (pos[0], pos[1]), add) # 왼쪽 위
    abcd(li, (pos[0], pos[1]+add), add) # 중간 위
    abcd(li, (pos[0], pos[1]+add*2), add) # 오른쪽 위
    abcd(li, (pos[0]+add, pos[1]), add) # 중간 왼쪽
    abcd(li, (pos[0]+add, pos[1]+add*2), add) # 중간 오른쪽
    abcd(li, (pos[0]+add*2, pos[1]), add) # 왼쪽 아래
    abcd(li, (pos[0]+add*2, pos[1]+add), add) # 중간 아래
    abcd(li, (pos[0]+add*2, pos[1]+add*2), add) # 오른쪽 아래

abcd(li, (0, 0), n)

for i in li:
    for j in i:
        print(j, end="")
    print()

"""
구멍의 크기 = 3^n 1, 3, 9 ...

구멍의 위치 = 사각형 크기 / 3 의 중간값 27 = (9, 9) ~ (18, 18)

함수에 필요한 값
리스트 -> 공백을 넣기 위해 필요함
시작점 위치? 세로점, 가로점 형식으로 -> 공백을 넣을 위치를 찾는데 필요함
사각형 크기 -> 공백을 넣을 위치를 찾는데 필요함
(0, 0), 9
3, 3 ~ 6, 6

(9, 0), 9
12, 3 ~ 15, 6

(0, 9), 9
3, 12 ~ 6, 15

현 상태: 왼쪽위만 됨

1. 리스트를 별로 꽉채움
2. 리스트의 시작과 끝, 리스트를 함수에 넘김
3. 크기 / 3의 중간 위치에 공백 삽입
  3-1. 중간 위치의 시작은 크기 / 3을 start에 더해서 구함
       끝 위치는 start에 (크기/3)*2 한것을 더함
       크기가 27, start가 0이라 가정했을 때 최종적으로 중간 위치의 시작과 끝은 
       0 + 27/3 = 9
       0 + (27/3)*2 = 18
       이 됨.
4. 총 8개의 사각형을 함수로 호출함
  4-1. 위에서부터 오르쪽으로 간다면
       (0, 0) ~ (8, 8), (0, 9) ~ (8, 17), (0, 18) ~ (8, 26)
       (9, 0) ~ (17, 8), (17, 18) ~ (17, 26)
       (18, 0) ~ (26, 8), (18, 9) ~ (18, 17), (18, 18) ~ (18, 26)
       이 될거임.


***************************
* ** ** ** ** ** ** ** ** *
***************************
***   ******   ******   ***
* *   * ** *   * ** *   * *
***   ******   ******   ***
***************************
* ** ** ** ** ** ** ** ** *
***************************
*********         *********
* ** ** *         * ** ** *
*********         *********
***   ***         ***   ***
* *   * *         * *   * *
***   ***         ***   ***
*********         *********
* ** ** *         * ** ** *
*********         *********
***************************
* ** ** ** ** ** ** ** ** *
***************************
***   ******   ******   ***
* *   * ** *   * ** *   * *
***   ******   ******   ***
***************************
* ** ** ** ** ** ** ** ** *
***************************
"""
